#!/usr/bin/python -tt
# -*- coding: utf-8 -*-
# ^^-- use utf-8 strings by default
#-- NOTE: Tabs and spaces do NOT mix!! '-tt' will flag violations as an error.{#
# pylint: disable=line-too-long,invalid-name
#-- line-too-long is inevitable with the Jinga2 strings #}
#===============================================================================
"""{#
    .. py:module:: python_script
    #}
    :program:`{{ script_name|default("TODO: CHANGEME", true) }}`
    ============================================================

    In addition to the options listed in help output, :program:`{{ script_name|default("TODO: CHANGEME", true) }}` includes
    the following 'hidden' optoins:

    .. option:: --help-rest

        Output usage information in Sphinx/reST-style markup.

    .. option:: --debug

        Output debug-level information.

    :synopsis: {{ script_synopsis|default("TODO: CHANGEME", true) }}

    :copyright: {{ software_copyright|default("TODO: CHANGEME", true) }}
    :license: {{ software_license|default("TODO: CHANGEME", true) }}

    .. codeauthor:: {{ full_name|default("TODO: CHANGEME", true) }} <{{ email|default("TODO: CHANGEME", true) }}>
"""
#===============================================================================
#-- Standard Imports
#-- NOTE: We use optparse for compatibility with python < 2.7 as (the superior)
#--       argparse wasn't standard until 2.7 (2.7 deprecates optparse)
#--       As of 20161212 the template is coded for optparse only
import logging      #: Python's standard logging facilities
import optparse     #: Argument parsing
import os           #: Misc. OS interfaces
import sys          #: System-specific parameters & functions
# import traceback    #: Print/retrieve a stack traceback
#==============================================================================
#-- Third Party Imports
#==============================================================================
#-- Require a minimum Python version
if sys.version_info <= (2, 6):
    sys.exit("Minimum Python version: 2.6")
#-- NOTE: default Python versions:
#--       RHEL4    2.3.4
#--       RHEL5    2.4.3
#--       RHEL6.0  2.6.5
#--       RHEL6.1+ 2.6.6
#--       REHL7    2.7.5
#-- Recent Fedora versions (24/25) stay current on 2.7 (2.7.12 as of 20161212)
#==============================================================================
#==============================================================================
#-- Application Library Imports
#==============================================================================
#-- Variables which are meta for the script should be dunders (__varname__)
#-- TODO: Update meta vars
__version__ = '{{ version|default("TODO: CHANGEME", true) }}' #: current version
__revised__ = '20180405-155626' #: date of most recent revision
__contact__ = '{{ contact_name|default("TODO: CHANGEME", true) }} <{{ contact_email|default("TODO: CHANGEME", true) }}>' #: primary contact for support/?'s
__synopsis__ = '{{ script_synopsis|default("TODO: CHANGEME", true) }}'
__description__ = """{{ script_description|default("TODO: CHANGEME", true) }}
"""
#------------------------------------------------------------------------------
#-- The following few variables should be relatively static over life of script
__author__ = ['{{ full_name|default("TODO: CHANGEME", true) }} <{{ email|default("TODO: CHANGEME", true) }}>'] #: coder(s) of script
__created__ = '{{ date|default("TODO: CHANGEME", true) }}'               #: date script originlly created
__copyright__ = '{{ software_copyright|default("TODO: CHANGEME", true) }}' #: Copyright short name
__license__ = '{{ software_license|default("TODO: CHANGEME", true) }}'
__gnu_version__ = False #: If True print GNU version string (which includes copyright/license)
__cononical_name__ = '{{ script_name|default("TODO: CHANGEME", true) }}' #: static name, *NOT* os.path.basename(sys.argv[0])
__project_name__ = '{{ project_name|default("TODO: CHANGEME", true) }}'  #: name of overall project, if needed
__project_home__ = '{{ project_home|default("TODO: CHANGEME", true) }}'  #: where to find source/documentation
__template_version__ = '2.0.0-alpha-02'              #: version of template file used
#-- We are not using this variable for now.
__docformat__ = 'reStructuredText en'       #: attempted style for documentation
__basename__ = os.path.basename(sys.argv[0]) #: name script run as
#------------------------------------------------------------------------------
#-- Flags
__logger_file_set__ = False #: If a file setup for logger
__require_root__ = False    #: Does script require root
#------------------------------------------------------------------------------
#-- Load in environment variables, or set defaults
__default_dsf__ = os.getenv('DEFAULT_TIMESTAMP') if 'DEFAULT_TIMESTAMP' in os.environ else "%Y%m%d-%H%M%S"
__logger_dsf__ = os.getenv('LOGGER_DSF') if 'LOGGER_DSF' in os.environ else __default_dsf__
__backup_dsf__ = os.getenv('BACKUP_DSF') if 'BACKUP_DSF' in os.environ else __default_dsf__
__logger_file__ = os.getenv('LOGGER_FILE') if 'LOGGER_FILE' in os.environ else None
__logger_lvl__= os.getenv('LOGGER_LVL') if 'LOGGER_LVL' in os.environ else 'info'

EXIT_STATUS = None
#==============================================================================
class _ModOptionParser(optparse.OptionParser):
    """By default format_epilog() strips newlines, we don't want that, os override."""

    def format_epilog(self, formatter):
        """We'll preformat the epilog in the decleration, just pass it through"""
        return self.epilog


#==============================================================================
class _ReSTHelpFormatter(optparse.HelpFormatter):
    """Format help for Sphinx/ReST output.

    All over-ridden methods started life as copy'n'paste from original's source
    code.
    """

    def __init__(self, indent_increment=0, max_help_position=4, width=80, short_first=0):
        optparse.HelpFormatter.__init__(self, indent_increment,
                                        max_help_position, width, short_first
                                       )

    def format_usage(self, usage):
        retval = ["%s\n" % ("=-"[self.level] * len(__cononical_name__))]
        retval.append("%s\n" % (__cononical_name__))
        retval.append("%s\n\n" % ("=-"[self.level] * len(__cononical_name__)))
        retval.append("%s" % self.format_heading('Synopsis'))
        retval.append("**%s** %s\n\n" % (__cononical_name__, usage))
        return ''.join(retval)

    def format_heading(self, heading):
        return "%s\n%s\n\n" % (heading, "--"[self.level] * len(heading))

    def format_description(self, description):
        if description:
            retval = ["%s" % self.format_heading('Description')]
            retval.append("%s\n" % self._format_text(description))
            return ''.join(retval)
        else:
            return ""

    def format_option(self, option):
        opts = self.option_strings[option]
        retval = ['.. option:: %s\n\n' % opts]
        if option.help:
            # help_text = self.expand_default(option)
            # help_lines = textwrap.wrap(help_text, self.help_width)
            retval.append("%4s%s\n\n" % ("", self.expand_default(option)))
            # retval.extend(["%4s%s\n" % ("", line)
            #                for line in help_lines[1:]])
        elif opts[-1] != "\n":
            retval.append("\n")
        return "".join(retval)

    def format_option_strings(self, option):
        """Return a comma-separated list of option strings & metavariables."""
        if option.takes_value():
            metavar = option.metavar or option.dest.upper()
            short_opts = ["%s <%s>" % (sopt, metavar)
                          for sopt in option._short_opts] #: pylint: disable=protected-access
                                                          #: We're over-riding the default
                                                          #:    method, keeping most the code.
                                                          #:    Not sure how else we'd do this.
            long_opts = ["%s=<%s>" % (lopt, metavar)
                         for lopt in option._long_opts]   #: pylint: disable=protected-access
        else:
            short_opts = option._short_opts               #: pylint: disable=protected-access
            long_opts = option._long_opts                 #: pylint: disable=protected-access

        if self.short_first:
            opts = short_opts + long_opts
        else:
            opts = long_opts + short_opts

        return ", ".join(opts)


#==============================================================================
def _debug_info():
    """ Provides meta info for debug-level output """
    import platform #: Easily get platforms identifying info
    logger = logging.getLogger(__name__)
    logger.debug('Cononical: %s', __cononical_name__)
    logger.debug('Abs Path:  %s', os.path.abspath(sys.argv[0]))
    logger.debug('Full Args: %s', ' '.join(sys.argv[:]))
    logger.debug('Python:    %s (%s)', sys.executable, platform.python_version())
    logger.debug('Version:   %s', __version__)
    logger.debug('Created:   %s', __created__)
    logger.debug('Revised:   %s', __revised__)
    logger.debug('Coder(s):  %s', __author__)
    logger.debug('Contact:   %s', __contact__)
    logger.debug('Project:   %s', __project_name__)
    logger.debug('Project Home: %s', __project_home__)
    logger.debug('Template Version: %s', __template_version__)
    logger.debug('System:    %s',
                 platform.system_alias(platform.system(),
                                       platform.release(),
                                       platform.version()
                                      )
                )
    if platform.system() in 'Linux':
        logger.debug('Distro:    %s', platform.linux_distribution())
    logger.debug('Hostname:  %s', platform.node())
    logger.debug('[res]uid:  %s', os.getresuid())
    logger.debug('PID/PPID:  %s/%s', os.getpid(), os.getppid())


#==============================================================================
def timestamp(time_format=None):
    import time
    if time_format is None:
        time_format = __default_dsf__
    time_format = time_format.strip('+')
    return time.strftime(time_format)


#==============================================================================
def get_temp(directory=None):
    import tempfile
    if directory is not None and directory.lower() in 'directory':
        return tempfile.mkdtemp(prefix='%s-d.' % __cononical_name__)
    else:
        return tempfile.mkstemp(prefix='%s.' % __cononical_name__)


#==============================================================================
def set_value(file, key, value):
    pass


#==============================================================================
def CLILogger(options):

    if options.debug:
        level = logging.DEBUG
        formatter = logging.Formatter('%(asctime)s %(levelname)-8s %(message)s',
                                      __logger_dsf__
                                     )
    else:
        if __logger_lvl__.isdigit():
            if int(__logger_lvl__) > 49:
                level = logging.CRITICAL
            elif int(__logger_lvl__) < 10:
                level = logging.NOTSET
            else:
                level = (int(__logger_lvl__)) //10 * 10
        else:
            level = logging.getLevelName(__logger_lvl__.upper())
        formatter = logging.Formatter('%(message)s')

    #-- Yes, we are going to ignore unknown values by setting to INFO
    if isinstance(level, str) and level.startswith('Level'):
        level = logging.INFO

    logger = logging.getLogger(__name__) #: pylint: disable=invalid-name
                                         #: lower-case is better here
    logger.setLevel(level)

    #-- Console output
    console = logging.StreamHandler()
    console.setLevel(level)
    console.setFormatter(formatter)
    logger.addHandler(console)

    #-- File output
    if __logger_file__:
        if os.path.isfile(__logger_file__):
            os.rename(__logger_file__, '%s.%s' % (__logger_file__,timestamp(__backup_dsf__)))
        #: NOTE: In Python >= 2.6 normally I give FileHandler 'delay="true"'
        logfile = logging.FileHandler(__logger_file__)
        logfile.setLevel(logging.DEBUG)
        formatter = logging.Formatter(
            '%(asctime)s.%(msecs)d:%(levelno)s:%(name)s.%(funcName)s:%(lineno)d:%(message)s',
            __logger_dsf__
            )
        logfile.setFormatter(formatter)
        logger.addHandler(logfile)
        __logger_file_set__ = True

    if options.debug:
        _debug_info()
        print '\n----- start -----\n'
    
    return logger

#==============================================================================
def which(program):
    """Test if a program exists in $PATH.

    Args:
        program (str): Name of program to find.

    Returns:
        String to use for program execution.

    Note:
        Originally found this here:
        http://stackoverflow.com/questions/377017/test-if-executable-exists-in-python
    """
    logger = logging.getLogger(__name__)
    logger.debug('Looking for command: %s', program)
    def _is_exe(fpath):
        """ Private test for executeable """
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program) #: pylint: disable=unused-variable
                                          #: We are totally throwing fname away
    if fpath:
        if _is_exe(program):
            logger.debug('Found %s here.', program)
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if _is_exe(exe_file):
                logger.debug('Found %s here: %s', program, exe_file)
                return exe_file

    logger.debug('Could not find %s.', program)
    return None


#==============================================================================
class CLIOptions(object):
    """ """
    _helprest = False
    _debug = False

    _options = None
    _args = None

    def __init__(self, args=None):
        if self._options is not None:
            raise ValueError('CLIOptions already initialized.')
        elif args:
            (self._options, self._arguments) = self._parse_args(args)
        else:
            self._options = None
        if self.helprest:
            self._print_ReSTHelp()

    @property
    def args(self):
        if self._arguments is not None:
            return self._arguments
        return self._args

    @args.setter
    def args(self, value):
        self._args = value

    @property
    def helprest(self):
        if self._options is not None:
            return self._options.helprest
        return self._helprest

    @helprest.setter
    def helprest(self, value):
        self._helprest = value

    @property
    def debug(self):
        if self._options is not None:
            return self._options.debug
        return self._debug

    @debug.setter
    def debug(self, value):
        self._debug = value

    def _print_ReSTHelp(self):
        self.parser.formatter = _ReSTHelpFormatter()
        self.parser.usage = '[*options*]'            #: pylint: disable=attribute-defined-outside-init
                                                #: Not yet sure of a better way to do this...
        self.parser.description = __description__    #: pylint: disable=attribute-defined-outside-init
        self.parser.epilog = ('\nAuthor\n------\n\n'
                         '%s\n'
                        ) % ('; '.join(__author__))
        self.parser.print_help()
        sys.exit(os.EX_OK)

    def _parse_args(self, args):
        #-- Parse Options (rely on OptionsParser's exception handling)
        description_string = __synopsis__
        epilog_string = ('\n%s\n\n'
                         'Created: %s  Contact: %s\n'
                         'Revised: %s  Version: %s\n'
                         '%s, part of %s. Project home: %s\n'
                        ) % (__description__,
                             __created__, __contact__,
                             __revised__, __version__,
                             __cononical_name__, __project_name__, __project_home__
                            )
        usage_string = '%s [options]' % (__basename__)
        version_string = '%s (%s) %s' % (__cononical_name__, __project_name__, __version__)
        if __gnu_version__:
            version_string += ('\nCopyright {{ software_copyright|default("TODO: CHANGEME", true) }}\n'
                               'License {{ software_license|default("TODO: CHANGEME", true) }}\n'
                              )
        parser = _ModOptionParser(version=version_string, usage=usage_string,
                                  description=description_string, epilog=epilog_string
                                 )
        self.parser = parser
        #-- 'Hidden' options
        parser.add_option('--help-rest', dest='helprest', action='store_true',
                          help=optparse.SUPPRESS_HELP, default=False
                         )
        parser.add_option('--debug', dest='debug', action='store_true',
                          help=optparse.SUPPRESS_HELP, default=False
                         )
        return parser.parse_args()


#==============================================================================
def main(options, logger):
    """ This is where the action takes place """
    logger.debug('Starting main()')
    #-- TODO: Do something more interesting here...{#
    logger.debug('debug message')
    logger.info('info message')
    logger.warn('warn message')
    logger.error('error message')
    logger.critical('critical message')

    print timestamp()
    print 'FILE'
    tempfile = get_temp()
    print tempfile
    os.remove(tempfile[1])
    print 'DIR'
    tempdir = get_temp('dir')
    print tempdir
    os.rmdir(tempdir)
    print 'THING'
    tempthing = get_temp('dat')
    print tempthing
    os.remove(tempthing[1])

    #}


#==============================================================================
if __name__ == '__main__':
    #-- Setting up logger here so we can use them in even of exceptions.
    #   Parsing options here as we need them to setup the logger.
    options = CLIOptions(sys.argv[1:])
    logger = CLILogger(options)
    if __require_root__ and os.getegid() != 0:
        logger.error('Must be run as root.')
        sys.exit(77)

    try:
        main(options, logger)
    except KeyboardInterrupt: # Catches Ctrl-C
        logger.debug('Caught Ctrl-C')
        EXIT_STATUS = 130
    except SystemExit as error: # Catches sys.exit()
        logger.debug('Caught SystemExit')
        logger.warning('%s: [SystemExit] %s', __basename__, error.strerror)
        if error.errno is None:
            EXIT_STATUS = 10
        else:
            EXIT_STATUS = error.errno
    #-- NOTE: "except Exception as variable:" syntax was added in 2.6
    except IOError as error:
        logger.debug('Caught IOError')
        if error.errno is None:
            logger.critical('%s: [IOError]: %s', __basename__, error.message)
            EXIT_STATUS = 10
        elif error.errno == 2:                #: No such file/directory
            logger.critical('%s: [IOError] %s: %s', __basename__,
                            error.strerror, error.filename
                           )
            EXIT_STATUS = os.EX_UNAVAILABLE
        elif error.errno == 13:                #: Permission Denied
            logger.critical('%s: [IOError] %s: %s', __basename__,
                            error.strerror, error.filename
                           )
            EXIT_STATUS = os.EX_NOPERM
        else:
            logger.critical('%s: [IOError] %s', __basename__, error.strerror)
            EXIT_STATUS = error.errno
    except OSError as error:
        logger.debug('Caught OSError')
        if error.errno == 2:                #: No such file/directory
            logger.critical('%s: [OSError] %s: %s', __basename__,
                            error.strerror, error.filename
                           )
            EXIT_STATUS = os.EX_UNAVAILABLE
        else:
            logger.critical('%s: [OSError] %s', __basename__, error.strerror)
            EXIT_STATUS = error.errno
    except Exception as error:
        logger.debug('Caught Exception')
        logger.critical('%s: %s' % (__basename__, error))
        EXIT_STATUS = 10
    else:
        logger.debug('main() exited cleanly.')
        EXIT_STATUS = os.EX_OK
    #-- NOTE: "try..except..finally" does not work pre 2.5
    finally:
        logger.debug('Mandatory clean-up.')
        if EXIT_STATUS is None:
            logger.debug('EXIT_STATUS is still None.')
            EXIT_STATUS = 20
        if options.debug:
            print '\n------ end ------\n'
        logging.shutdown()
        sys.exit(EXIT_STATUS)
    #-- NOTE: more exit codes here:
    #--   https://docs.python.org/2/library/os.html#process-management
