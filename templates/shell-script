#!/bin/sh
#-- NOTE: Default to POSIX shell/mode. Be mindful of your reasons before
#--       switching to Bash, and consider using Python instead...
#==============================================================================
#:"""
#: .. program:: {{ script_name|default("TODO: CHANGEME", true) }}
#:    :synopsis: {{ script_synopsis|default("TODO: CHANGEME", true) }}
#:
#:    :copyright: {{ software_copyright|default("TODO: CHANGEME", true) }}
#:    :license: {{ software_license|default("TODO: CHANGEME", true) }}
#:
#: .. codeauthor:: {{ full_name|default("TODO: CHANGEME", true) }} <{{ email|default("TODO: CHANGEME", true) }}>
#:
#: .. note:
#:     For guidance, please refer to:
#:
#:         - 'POSIX.1-2008 Base Specification, Issue 7 <http://pubs.opengroup.org/onlinepubs/9699919799/nframe.html>'_
#:         - 'GNU Coding Standard <http://www.gnu.org/prep/standards/>'_
#:
#: .. note:
#:     ShellCheck should be used, accepted issues should be marked w/disable comment
#:
#: .. warning:
#:     Option parsing is currently less-than-ideal
#:
#: {{ script_description|default("TODO: CHANGEME- description for documentation", true) }}
#:"""
#==============================================================================
#: .. section:: Preamble (script-specific vars -- override this)
#: .. revision:: 2019-06-28
#------------------------------------------------------------------------------
#-- Variables which are meta for the script should be dunders (__varname__)
#-- TODO: UPDATE meta vars
__version__='{{ version|default("TODO: CHANGEME", true) }}' #: current version
__revised__='20190628-173643' #: date of most recent revision
__contact__='{{ contact_name|default("TODO: CHANGEME", true) }} <{{ contact_email|default("TODO: CHANGEME", true) }}>' #: primary contact for support/?'s
__synopsis__='{{ script_synopsis|default("TODO: CHANGEME", true) }}'
__description__="
{{ script_description|default('TODO: CHANGEME - description for --help', true) }}
"
#------------------------------------------------------------------------------
#-- TODO: If you want to hard-set some variables, do it here. For example:
# BACKUP_DSF:="+%Y%m%d-%H%M%S"
# DEFAULT_TIMESTAMP="+%Y%m%d-%H%M%S"
# LOGGER_DSF="+%Y%m%d-%H%M%S"
# LOGGER_FILE="${HOME}/var/log/{{ script_name|default("script_logger", true) }}.$(date +%Y%m%d-%H%M%S).log"
# LOGGER_LVL:="info"
#------------------------------------------------------------------------------
#-- Flags
__require_root__='false'    #: Does script require root
__container_safe__='false'  #: Are we safe to run inside a Docker container?
__gnu_version__='false'     #: If true print GNU version string (which includes copyright/license)
__script_debug__='false'    #: This can be set to 'true' via --debug paramater
#==============================================================================
#-- The following few variables should be relatively static over life of script
__author__='{{ full_name|default("TODO: CHANGEME", true) }} <{{ email|default("TODO: CHANGEME", true) }}>' #: coder(s) of script
__created__='{{ date|default("TODO: CHANGEME", true) }}'               #: date script originlly created
__copyright__='{{ software_copyright|default("TODO: CHANGEME", true) }}' #: Copyright short name
__license__='{{ software_license|default("TODO: CHANGEME", true) }}'
__cononical_name__='{{ script_name|default("TODO: CHANGEME", true) }}' #: static name, *NOT* os.path.basename(sys.argv[0])
__project_name__='{{ project_name|default("TODO: CHANGEME", true) }}'  #: name of overall project, if needed
__project_home__='{{ project_home|default("TODO: CHANGEME", true) }}'  #: where to find source/documentation
__template_version__='2.13.0'  #: version of template file used
#==============================================================================
#: .. section:: General variables & settings
#: .. revision:: 2019-06-28
#------------------------------------------------------------------------------
__basename__="${0}"                                    #: name script run as
#-- We are not using this variable for now.
# shellcheck disable=2034
__docformat__='reStructuredText en'                    #: attempted style for documentation
__original_args__="${*}"    #: capture original arg list before messing with it
#------------------------------------------------------------------------------
#-- Load in environment variables, or set defaults
__default_dsf__=${DEFAULT_TIMESTAMP:="+%Y%m%d-%H%M%S"} #: Default format for 'date' command
__logger_dsf__=${LOGGER_DSF:="+%Y%m%d-%H%M%S"}         #: Debug logging output format for 'date' command
__backup_dsf__=${BACKUP_DSF:="+%Y%m%d-%H%M%S"}         #: Backup file format for 'date' command
__logger_file__=${LOGGER_FILE:="nil"}                  #: Path & name of log file to use
case "$(printf '%s' "${LOGGER_LVL:="info"}" | tr '[:upper:]' '[:lower:]')" in
    debug)          __logger_lvl__=10 ;;
    info)           __logger_lvl__=20 ;;
    warn|warning)   __logger_lvl__=30 ;;
    error)          __logger_lvl__=40 ;;
    crit|critical)  __logger_lvl__=50 ;;
    *)              __logger_lvl__=0 ;;
esac
#------------------------------------------------------------------------------
#-- Load colors from environment variables, or set to empty
cf_black=${cf_black:=''}   ; cf_white=${cf_white:=''}
cf_orange=${cf_orange:=''} ; cf_magenta=${cf_magenta:=''}
cf_yellow=${cf_yellow:=''} ; cf_red=${cf_red:=''}
cf_purple=${cf_purple:=''} ; cf_blue=${cf_blue:=''}
cf_cyan=${cf_cyan:=''}     ; cf_green=${cf_green:=''}
c_bold=${c_bold:=''}       ; c_reset=${c_reset:=''}
c_undr=${c_undr:=''}       ; c_hide=${c_hide:=''}
c_blik=${c_blik:=''}       ; c_revr=${c_revr:=''}
#------------------------------------------------------------------------------
#-- Set some default settings
#-- NOTE: If you don't want to handle these error conditions yourself,
#         then uncomment these.
# set -o errexit  # Exit if any statement returns non-true value
# set -o nounset  # Exit if attempt to use an uninitialised variable
#------------------------------------------------------------------------------
#-- Check for debug & full debug flags
#   NOTE: this is not POSIX
if [ "${*#*--debug}" != "${*}" ]; then
    #-- Only do full shell trace if external DEBUG var set to full
    [ "${DEBUG}" = 'full' ] && set -o xtrace
fi
#------------------------------------------------------------------------------
#-- Basic environment setup
#   Ref: https://github.com/fedora-sysv/initscripts)
#------------------------------------------------------------------------------
#-- Sane umask
umask 022
#-- Sane command search path
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
#-- Sane screen width
[ -z "${COLUMNS:-}" ] && COLUMNS=80
if [ -z "${CONSOLETYPE:-}" ]; then
    if [ -c "/dev/stderr" ] && [ -r "/dev/stderr" ]; then
        if [ -x "$(command -v consoletype)" ] ; then
            CONSOLETYPE="$(consoletype < /dev/stderr 2>/dev/null)"
        elif [ -x "$(command -v tty)" ] ; then
            CONSOLETYPE="$(tty 2>/dev/null | cut -d'/' -f3)"
        else
            CONSOLETYPE='unknown'
        fi
    else
        CONSOLETYPE='serial'
    fi
fi
#==============================================================================
_debug_info() {
    #:"""
    #: .. function:: _debug_info()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Provides meta info for debug-level output
    #:
    #: .. note::
    #:     We set script_path here to avoid calling cd/dirname/pwd when not really needed
    #:"""
    # shellcheck disable=SC1007
    script_path="$(CDPATH= cd -- "$(dirname -- "${0}")" && pwd )"

    logger debug "Cononical: ${__cononical_name__}"
    logger debug "Abs Path:  ${script_path}/${__basename__}"
    logger debug "Args List: ${__original_args__}"
    logger debug "Version:   ${__version__}"
    logger debug "md5sum:    $(md5sum "${__basename__}" 2>&1)"
    logger debug "Created:   ${__created__}"
    logger debug "Revised:   ${__revised__}"
    logger debug "Coder(s):  ${__author__}"
    logger debug "Contact:   ${__contact__}"
    logger debug "Project:   ${__project_name__}"
    logger debug "Project Home: ${__project_home__}"
    logger debug "Template Version: ${__template_version__}"
    logger debug "System:    $(uname -orv 2>&1)"
    logger debug "Hostname:  $(hostname 2>&1)"
    logger debug "Logname:   ${USERNAME:=$(logname 2>&1)}"
    logger debug "[re]uid:   $(id -ur 2>&1)/$(id -u 2>&1)"
    logger debug "PID/PPID:  ${$}/${PPID}"
    if [ -x /bin/pstree ] || [ -x /usr/bin/pstree ] ; then
        if pstree -psu ${$} 1>/dev/null 2>&1 ; then
            logger debug "pstree psu: $(pstree -psu ${$})"
        else
            logger debug "pstree pu: $(pstree -pu ${$})"
        fi
    fi
    logger debug '-----------------'
    logger debug '----- start -----'
    logger debug '-----------------'

    return
}
#==============================================================================
_usage() {
    #:"""
    #: .. function:: _usage()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Provides usage information
    #:
    #: .. note::
    #:     GNU does not recommend short options for help/version.
    #:     I do not recommend short option for, nor display of, debug option.
    #:     but I do recommend short option for help.
    #:"""
    printf 'Usage: %s [options]\n\n' "${__basename__}"
    printf '%s\n\n' "${__synopsis__}"
    printf 'Options:\n'
    usage_options '  %s     %s\n'
    printf '\n%s\n\n' "${__description__}"
    printf 'Created: %s  Contact: %s\n' "${__created__}" "${__contact__}"
    printf 'Revised: %s  Version: %s\n' "${__revised__}" "${__version__}"
    printf '(c) Copyright %s (License: %s)\n'   "${__copyright__}" "${__license__}"
    printf '%s, part of %s. Project home: %s\n' "${__cononical_name__}" \
                                                "${__project_name__}" \
                                                "${__project_home__}"

    return
}
#==============================================================================
_usage_rest() {
    #:"""
    #: .. function:: _usage_rest()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Provides usage information in Sphinx/ReST format.
    #:
    #:"""
    # {% raw %}
    __usage_rest_char="%${#__cononical_name__}s" # {% endraw %}
    #-- We are using a variable to format data in printf
    # shellcheck disable=2059
    printf "${__usage_rest_char}\\n" | tr " " "="
    printf '%s\n' "${__cononical_name__}"
    #-- We are using a variable to format data in printf
    # shellcheck disable=2059
    printf "${__usage_rest_char}\\n" | tr " " "="
    printf '\n'
    printf 'Synopsis\n'
    printf '%s\n\n' '--------' "${__synopsis__}"
    printf '**%s** [*options*]\n\n' "${__cononical_name__}" #: TODO: UPDATE usage
    printf 'Description\n'
    printf '%s\n\n' '-----------'
    printf '%s\n\n' "${__description__}"
    printf 'Options\n'
    printf '%s\n\n' '-------'
    usage_options '.. option:: %s\n\n    %s\n\n'
    printf 'Author\n'
    printf '%s\n\n' '------'
    printf '%s\n\n' "${__author__}"
    printf 'Copyright\n'
    printf '%s\n\n' '------'
    printf '(c) Copyright %s (License: %s)\n\n' "${__copyright__}" "${__license__}"

    return
}
#==============================================================================
_version() {
    #:"""
    #: .. function:: _version()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Provides version information
    #:
    #: .. note::
    #:     GNU guidelines dictate adding copyright and license info
    #:"""
    printf '%s (%s) %s\n' "${__cononical_name__}" "${__project_name__}" "${__version__}"
    if [ "${__gnu_version__}" = 'True' ]; then
        printf 'Copyright %s\n' "${__copyright__}"
        printf 'License %s\n' "${__license__}"
    fi

    return
}
#==============================================================================
exit_clean() {
    #:"""
    #: .. function:: exit_clean()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Clean up everything and exit gracefully
    #: .. warning::
    #:     This function exits the script
    #:"""
    [ "${__script_debug__}" = true ] && {
        set +o xtrace
        logger debug '-----------------'
        logger debug '------ end ------'
        logger debug '-----------------'
        __script_debug__=false
    }

    trap - INT TERM HUP
    if [ "${__logger_file_set__}" = "true" ]; then
        printf '%s [EXIT]: Script finished.\n' "$(timestamp "${__logger_dsf__}")" 1>&3
        printf 'Log file created: %s\n' "${__logger_file__}"
        exec 3>&-
    fi
    exit 0

    return
}
#==============================================================================
_exit_trap() {
    #:"""
    #: .. function:: exit_error()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: On terminal traps, run this before exit_error
    #:
    #: :param int trap_line: Line number trap caught on
    #: :param str trap_name: Short name of trap
    #: .. warning::
    #:     This function calls exit_error, which exits the script
    #:"""
    exit_error "${?}" "caught trap ${2} at line ${1}; exiting"
}
#:"""
#: .. note::
#:     Setting traps seprately for 2 reasons:
#:
#:         - Avoid calling "$(kill -l $((trap_num - 128)))" in exti_trap
#:         - Incase we want to handle them differently in the future
#:
#: .. describe:: Bug
#:     Passing LINENO may not be working as expected, need more real-world tests
#:"""
trap '_exit_trap ${LINENO} INT'  INT
trap '_exit_trap ${LINENO} TERM' TERM
trap '_exit_trap ${LINENO} HUP'  HUP
#==============================================================================
exit_error() {
    #:"""
    #: .. function:: exit_error()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Report error and exit
    #:
    #: :param int error_number:  Number to use for Exit Code
    #: :param str error_string:  Short description of error
    #: .. note::
    #:     You may want to use ${LINENO} in the string this is called with.
    #: .. warning::
    #:     This function exits the script
    #:"""
    if [ "${#}" -eq 2 ] ; then # {% endraw %}
        __exit_error_code="${1}"
        __exit_error_mess="${2}"
    else
        __exit_error_code=128
        __exit_error_mess='Invalid arguments for exit_error()'
    fi

    trap - INT TERM HUP
    printf '%s: %s\n' "${cf_red}${__cononical_name__}" \
                      "${c_bold}${__exit_error_mess}${c_reset}" 1>&2
    if [ "${__logger_file_set__}" = "true" ]; then
        printf '%s [EXIT]: %s\n' "$(timestamp "${__logger_dsf__}")" "${__exit_error_mess}" 1>&3
        printf 'Log file created: %s\n' "${__logger_file__}"
        exec 3>&-
    fi
    exit "${__exit_error_code}"
}
#==============================================================================
get_platform_tag() {
    #:"""
    #: .. function:: get_platform_tag()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Identify underlining 'hardware' platform and return tag.
    #:
    #: .. note:: FKA identify_platform()
    #:"""
    __get_platform_tag='unknown'
    if [ -f '/sys/devices/virtual/dmi/id/sys_vendor' ] ; then
        __get_platform_tag_sys_vendor="$(cat /sys/devices/virtual/dmi/id/sys_vendor)"
        case "${__get_platform_tag_sys_vendor}" in
            'Microsoft Corporation') __get_platform_tag='azure' ;;
            'VMware, Inc.')          __get_platform_tag='vmware' ;;
            'innotek GmbH')          __get_platform_tag='vbox' ;;
            *)                       __get_platform_tag='other' ;;
        esac
    fi

    printf '%s' "${__get_platform_tag}"
    return
}
#==============================================================================
get_temp() {
    #:"""
    #: .. function:: get_temp()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Creates a temporary file (or directory), returning the path. Defaults to file.
    #:
    #: :param str directory:   Pass any substring of 'directory' to create a directory
    #:
    #:"""
    __get_temp_dir='' # {% raw %}
    if [ "${#}" -eq 1 ] ; then # {% endraw %}
        case 'directory' in
            *${1}*) __get_temp_dir='-d' ;;
            *)      ;;
        esac ;
    fi
    if command -v mktemp >/dev/null 2>&1; then
        mktemp ${__get_temp_dir} -t "${__cononical_name__}${__get_temp_dir}.XXXXXXXXXX" || return "${?}"
    else
        if [ "${__get_temp_dir}" = '' ]; then
            __get_temp_path="/tmp/${__cononical_name__}.${$}"
            touch "${__get_temp_path}" || return "${?}"
        else
            __get_temp_path="/tmp/${__cononical_name__}-d.${$}"
            mkdir "${__get_temp_path}" || return "${?}"
        fi
        printf '%s' "${__get_temp_path}"
    fi

    return
}
#==============================================================================
is_false() {
    #:"""
    #: .. function:: is_false()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Check if a string is a standard false flag
    #: Ref: https://github.com/fedora-sysv/initscripts)
    #:
    #: :param str boolean:   String to check
    #:"""# {% raw %}
    if [ "${#}" -ne 1 ] ; then # {% endraw %}
        return 64
    fi
    case "${1}" in
        [fF] | [nN] | [nN][oO] | [fF][aA][lL][sS][eE] | 0) return 0 ;;
        *) return 1
    esac
}
#==============================================================================
is_true() {
    #:"""
    #: .. function:: is_true()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Check if a string is a standard true flag
    #: Ref: https://github.com/fedora-sysv/initscripts)
    #:
    #: :param str boolean:   String to check
    #:"""# {% raw %}
    if [ "${#}" -ne 1 ] ; then # {% endraw %}
        return 64
    fi
    case "${1}" in
        [tT] | [yY] | [yY][eE][sS] | [tT][rR][uU][eE] | 1) return 0 ;;
        *) return 1
    esac
}
#==============================================================================
is_in_string() {
    #:"""
    #: .. function:: is_in_string()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Check if a substring is in a string
    #:
    #: :param str needle:   Substring to search for
    #: :param str heystack: String to search in
    #:"""
    case "${2}" in
        *${1}*) return 0 ;;
        *)      return 1 ;;
    esac ;
}
#==============================================================================
logger() {
    #:"""
    #: .. function:: logger()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Provides an interface similar to Python's logging module
    #:
    #: :param str log_level:     String indicating log level
    #: :param str log_string:    String to print
    #: .. note::
    #:     This was inspired by tinylogger (Copyright (c) 2017 Nagarjuna
    #:     Kumarappan), but I think there is very little left of the original
    #:     code here. See: https://github.com/nk412/tinylogger
    #:"""
    case "$(printf '%s' "${1}")" in
        debug)          __logger_action_tag='DEBUG'    ; __logger_log_level_th=10 ;;
        info)           __logger_action_tag='INFO'     ; __logger_log_level_th=20 ;;
        warn|warning)   __logger_action_tag='WARNING'  ; __logger_log_level_th=30 ;;
        error)          __logger_action_tag='ERROR'    ; __logger_log_level_th=40 ;;
        crit|critical)  __logger_action_tag='CRITICAL' ; __logger_log_level_th=50 ;;
        *)              __logger_action_tag='UNKNOWN'  ; __logger_log_level_th=0 ;;
    esac
    shift

    if [ "${__logger_file_set__}" = "true" ]; then
        printf '%s [%s]: %s\n' "$(timestamp "${__logger_dsf__}")" \
                               "${__logger_action_tag}" "${@}" 1>&3
    fi

    if [ "${__logger_lvl__}" -le "${__logger_log_level_th}" ]; then
        if [ "${__script_debug__}" = true ]; then
            printf '%s %-10s ' "${cf_blue}$(timestamp "${__logger_dsf__}")" \
                               "${__logger_action_tag}${c_reset}"
        fi
        if [ "${__logger_log_level_th}" -le 10 ]; then
            printf '%sdebug: %s%s\n' "${cf_green}" "${@}" "${c_reset}"
        elif [ "${__logger_log_level_th}" -le 20 ]; then
            printf '%s%s%s\n' "${cf_white}" "${@}" "${c_reset}"
        elif [ "${__logger_log_level_th}" -le 30 ]; then
            printf '%sWarning: %s%s\n' "${cf_yellow}" "${@}" "${c_reset}" 1>&2
        elif [ "${__logger_log_level_th}" -le 40 ]; then
            printf '%sError: %s%s\n' "${cf_magenta}" "${@}" "${c_reset}" 1>&2
        else
            printf '%sCRITICAL: %s%s\n' "${cf_red}" "${@}" "${c_reset}" 1>&2
        fi
    fi

    return
}
#==============================================================================
set_value() {
    #:"""
    #: .. function:: set_value()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Add or change a KEY to a VALUE in a FILE, creating FILE if necessary.
    #:
    #: :param str file:   FILE to create/modify
    #: :param str key:    KEY to create/modify
    #: :param str value:  VALUE to set key to
    #: :param str quote:  set to 'noquote' if VALUE should not be quoted
    #:"""# {% raw %}
    if [ "${#}" -ne 3 ] && [ "${#}" -ne 4 ] ; then # {% endraw %}
        return 64
    fi
    __set_value_file="${1}"
    __set_value_key="${2}"
    __set_value_value="${3}"
    if ! [ "${4}" = 'noquote' ] ; then
        __set_value_value="'${__set_value_value}'"
    fi
    if sed -h 2>&1 | grep -q '\-E' ; then
        __set_value_sedopt='-E'
    else
        __set_value_sedopt='-r'
    fi

    if [ ! -e "${__set_value_file}" ] ; then
        touch "${__set_value_file}" || return "${?}"
    fi
    if grep -q "^${__set_value_key}=" "${__set_value_file}" ; then
        sed -i ${__set_value_sedopt} \
            "s|^${__set_value_key} *=.*|${__set_value_key}=${__set_value_value}|" \
            "${__set_value_file}" || return "${?}"
    else
        printf '%s=%s\n' "${__set_value_key}" "${__set_value_value}" \
            >> "${__set_value_file}" || return "${?}"
    fi

    return
}
#==============================================================================
timestamp() {
    #:"""
    #: .. function:: timestamp()
    #:
    #: Return a timestamp in a defined format.
    #:
    #: :param str array: Any params accepted by the date(1) command.
    #: :return: The date string. Ideally without whitespace.
    #: :rtype: str
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 20190626-1220
    #:"""# {% raw %}
    if [ "${#}" -eq 0 ]; then # {% endraw %}
        date "${__default_dsf__}" || return "${?}"
    else
        date "${@}" || return "${?}"
    fi

    return
}
#==============================================================================
init() {
    #:"""
    #: .. function:: init()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:
    #: Check for requirements, other set-up stuff
    #:"""
    #--------------------------------------------------------------------------
    #-- Check if effectively root
    #--------------------------------------------------------------------------
    if is_true "${__require_root__}" && [ "$(id -u)" -ne 0 ] ; then
      exit_error 77 'Must be run as root.'
    fi
    #--------------------------------------------------------------------------
    #-- Check if running inside Docker container
    #--------------------------------------------------------------------------
    if is_false "${__container_safe__}" && grep -q '/docker' /proc/self/cgroup ; then
      exit_error 78 'This script is not container safe.'
    fi
    #--------------------------------------------------------------------------
    #-- Set up log file
    if [ "${__logger_file__}" != "nil" ]; then
        mkdir -p "$(dirname "${__logger_file__}")"
        if [ -f "${__logger_file__}" ] ; then
            mv "${__logger_file__}" "${__logger_file__}"."$(timestamp "${__backup_dsf__}")"
        fi
        exec 3<> "${__logger_file__}" || exit 1
        __logger_file_set__='true'
    else
        exec 3>&1 || exit 1
        __logger_file_set__='false'
    fi
    _debug_info
    #--------------------------------------------------------------------------
    return
}
#==============================================================================
usage_options() {
    #:"""
    #: .. function:: usage_options()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-06-28
    #:"""
    #:
    #: :param str option_strfmt: The format to use.
    #:"""
    #-- TODO: UPDATE option list.# {% raw %}
    if [ "${#}" -eq 1 ] ; then
        __usage_option_strfmt="${1}"
    elif [ "${#}" -eq 0 ] ; then # {% endraw %}
        __usage_option_strfmt='%s (%s)\n'
    else
        return 64
    fi

    #-- We are using a variable to format data in printf
    # shellcheck disable=2059
    printf "${__usage_option_strfmt}" '--help, -h' 'Dislay this help'
    #-- We are using a variable to format data in printf
    # shellcheck disable=2059
    printf "${__usage_option_strfmt}" '--version ' 'Display version'

    return
}
#==============================================================================
#-- Process options
#   NOTE: this is not optimal, but is an attempt to keep things POSIX
#         compliant. If you are expecting arguments instead of params,
#         be sure to assign them... somehow...
#   Be sure to update usage_options() as well
# {% raw %}
while [ "${#}" -gt 0 ]; do  # {% endraw %}
    case "${1}" in
        --debug)     __script_debug__='true'
                     __logger_lvl__=10 ;;
        -h|--help)   _usage      && exit 0 ;;
        --help-ec)   _usage_ec   && exit 0 ;;
        --help-rest) _usage_rest && exit 0 ;;
        --version)   _version    && exit 0 ;;
        # --)          shift && break ;;
        # -?*)         exit_error 64 "Invalid option: ${1}" ;;
        *)           exit_error 64 "Invalid option: ${1}" ;;
    esac

    shift
done
#==============================================================================
#: .. section:: Body -- This is where The Magic(TM) happens
#: .. revision:: 2019-06-28
init

#==============================================================================
#-- TODO: Do something more interesting here...{#
logger debug "this is a debug"
logger info  "this is an info"
logger warn  "this is a warning"
logger error "this is an error"
logger crit  "this is critical"
#}

#==============================================================================
exit_clean
