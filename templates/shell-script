#!/bin/sh
#-- NOTE: Default to POSIX shell/mode. Be mindful of your reasons before
#--       switching to Bash, and consider using Python instead...
#==============================================================================
#:"""
#: .. program:: {{ script_name|default("TODO: CHANGEME", true) }}
#:    :synopsis: {{ script_synopsis|default("TODO: CHANGEME", true) }}
#:
#:    :copyright: {{ software_copyright|default("TODO: CHANGEME", true) }}
#:    :license: {{ software_license|default("TODO: CHANGEME", true) }}
#:
#: .. codeauthor:: {{ full_name|default("TODO: CHANGEME", true) }} <{{ email|default("TODO: CHANGEME", true) }}>
#:
#: .. note:
#:     For guidance, please refer to:
#:
#:         - 'POSIX.1-2008 Base Specification, Issue 7 <http://pubs.opengroup.org/onlinepubs/9699919799/nframe.html>'_
#:         - 'GNU Coding Standard <http://www.gnu.org/prep/standards/>'_
#:
#: .. note:
#:     ShellCheck should be used, accepted issues should be marked w/disable comment
#:
#: .. warning:
#:     Option parsing is currently less-than-ideal
#:
#: {{ script_description|default("TODO: CHANGEME", true) }}
#:"""
#==============================================================================
#-- Variables which are meta for the script should be dunders (__varname__)
#-- TODO: UPDATE meta vars
__version__='{{ version|default("TODO: CHANGEME", true) }}' #: current version
__revised__='20180302-141536' #: date of most recent revision
__contact__='{{ contact_name|default("TODO: CHANGEME", true) }} <{{ contact_email|default("TODO: CHANGEME", true) }}>' #: primary contact for support/?'s
__synopsis__='{{ script_synopsis|default("TODO: CHANGEME", true) }}'
__description__="
{{ script_description|default('TODO: CHANGEME', true) }}
"
#------------------------------------------------------------------------------
#-- The following few variables should be relatively static over life of script
__require_root__=0                      #: Whether the script requires root (1) or not (0)
__author__='{{ full_name|default("TODO: CHANGEME", true) }} <{{ email|default("TODO: CHANGEME", true) }}>' #: coder(s) of script
__created__='{{ date|default("TODO: CHANGEME", true) }}'               #: date script originlly created
__copyright__='{{ software_copyright|default("TODO: CHANGEME", true) }}' #: Copyright short name
__license__='{{ software_license|default("TODO: CHANGEME", true) }}'
__cononical_name__='{{ script_name|default("TODO: CHANGEME", true) }}' #: static name, *NOT* os.path.basename(sys.argv[0])
__project_name__='{{ project_name|default("TODO: CHANGEME", true) }}'  #: name of overall project, if needed
__project_home__='{{ project_home|default("TODO: CHANGEME", true) }}'  #: where to find source/documentation
__template_version__='1.6.0'             #: version of template file used
#-- We are not using this variable for now.
# shellcheck disable=2034
__docformat__='reStructuredText en'      #: attempted style for documentation
__basename__="${0}" #: name script run as
#------------------------------------------------------------------------------
#-- The following are string formats (prepended with strfmt_)
#-- NOTE: (you can ignore ShellCheck [SC2059] errors in lines
#         where these are used)
strfmt_error="${__cononical_name__}: %s\\n"
#==============================================================================
_usage_options() {
    #:"""
    #: .. function:: _usage_options()
    #:
    #: Lists options usign format passed to it.
    #:
    #: :param str strfmt_option: The format to use.
    #:"""
    #-- TODO: UPDATE option list.
    strfmt_option="${1}"
    #-- We are using a variable to format data in printf
    # shellcheck disable=2059
    printf "${strfmt_option}" '--help, -h' 'Dislay this help'
    #-- We are using a variable to format data in printf
    # shellcheck disable=2059
    printf "${strfmt_option}" '--version ' 'Display version'
}

#==============================================================================
_usage() {
    #:"""
    #: .. function:: _usage()
    #:
    #: Provides usage information
    #:
    #: .. note::
    #:     GNU does not recommend short options for help/version.
    #:     I do not recommend short option for, nor display of, debug option.
    #:     but I do recommend short option for help.
    #:"""
    printf 'Usage: %s [options]\n\n' "${__basename__}"
    printf '%s\n\n' "${__synopsis__}"
    printf 'Options:\n'
    _usage_options '  %s     %s\n'
    printf '\n%s\n\n' "${__description__}"
    printf 'Created: %s  Contact: %s\n' "${__created__}" "${__contact__}"
    printf 'Revised: %s  Version: %s\n' "${__revised__}" "${__version__}"
    printf '(c) Copyright %s (License: %s)\n'   "${__copyright__}" "${__license__}"
    printf '%s, part of %s. Project home: %s\n' "${__cononical_name__}" \
                                                "${__project_name__}" \
                                                "${__project_home__}"
}

#==============================================================================
_usage_rest() {
    #:"""
    #: .. function:: _usage_rest()
    #:
    #: Provides usage information in Sphinx/ReST format.
    #:
    #:"""
    # {% raw %}
    char="%${#__cononical_name__}s" # {% endraw %}
    #-- We are using a variable to format data in printf
    # shellcheck disable=2059
    printf "${char}\\n" | tr " " "="
    printf '%s\n' "${__cononical_name__}"
    #-- We are using a variable to format data in printf
    # shellcheck disable=2059
    printf "${char}\\n" | tr " " "="
    printf '\n'
    printf 'Synopsis\n'
    printf '%s\n\n' '--------'
    printf '**%s** [*options*]\n\n' "${__cononical_name__}" #: TODO: UPDATE usage
    printf 'Description\n'
    printf '%s\n\n' '-----------'
    printf '%s\n\n' "${__description__}"
    printf 'Options\n'
    printf '%s\n\n' '-------'
    _usage_options '.. option:: %s\n\n    %s\n\n'
    printf 'Author\n'
    printf '%s\n\n' '------'
    printf '%s\n\n' "${__author__}"
    printf 'Copyright\n'
    printf '%s\n\n' '------'
    printf '(c) Copyright %s (License: %s)\n\n' "${__copyright__}" "${__license__}"
}

#==============================================================================
_version() {
    #:"""
    #: .. function:: _version()
    #:
    #: Provides version information
    #:
    #: .. note::
    #:     GNU guidelines dictate adding copyright and license info
    #:     (see commented code.)
    #:
    #: .. warning::
    #:     HOWEVER, this may not always be desierable.
    #:     If not, REMOVE these lines -- do NOT leave them commented!
    #:"""
    printf '%s (%s) %s\n' "${__cononical_name__}" "${__project_name__}" "${__version__}"
    #-- TODO: UPDATE license - a boilerplate notice should go here as well
    # printf '%s\n' "${__copyright__}"
    # printf '%s\n' "${__license__}"
}

#==============================================================================
#-- ENV defaults for logger()
LOGGER_DSF=${LOGGER_DSF:="%Y%m%d-%H%M%S"}
case $(printf '%s' "${LOGGER_LVL:="info"}" | tr '[:upper:]' '[:lower:]') in
    debug)          LOGGER_LVL=10 ;;
    info)           LOGGER_LVL=20 ;;
    warn|warning)   LOGGER_LVL=30 ;;
    error)          LOGGER_LVL=40 ;;
    crit|critical)  LOGGER_LVL=50 ;;
    *)              LOGGER_LVL=0 ;;
esac

logger() {
    #:"""
    #: .. function:: logger()
    #:
    #: Provides an interface similar to Python's logging module
    #:
    #: :param str log_level:     String indicating log level
    #: :param str log_string:    String to print
    #: .. note::
    #:     This was inspired by tinylogger (Copyright (c) 2017 Nagarjuna
    #:     Kumarappan), but I think there is very little left of the original
    #:     code here. See: https://github.com/nk412/tinylogger
    #:"""
    case $(printf '%s' "${1}") in 
        debug)          action_tag='DEBUG'    ; log_level_th=10 ;;
        info)           action_tag='INFO'     ; log_level_th=20 ;;
        warn|warning)   action_tag='WARNING'  ; log_level_th=30 ;;
        error)          action_tag='ERROR'    ; log_level_th=40 ;;
        crit|critical)  action_tag='CRITICAL' ; log_level_th=50 ;;
        *)              action_tag='UNKNOWN'  ; log_level_th=0 ;;
    esac
    shift

    if [ ${LOGGER_LVL} -le ${log_level_th} ]; then
        if [ "${script_debug}" = true ]; then
            printf '%s %-10s ' "$(date "+${LOGGER_DSF}")" "${action_tag}"
        fi
        printf '%s\n' "${@}"
    fi
    true
}

#==============================================================================
_debug_info() {
    #:"""
    #: .. function:: _debug_info()
    #:
    #: Provides meta info for debug-level output
    #:
    #: .. note::
    #:     We set script_path here to avoid calling cd/dirname/pwd when not really needed
    #:"""
    # shellcheck disable=SC1007
    script_path="$(CDPATH= cd -- "$(dirname -- "${0}")" && pwd )"

    logger debug "Cononical: ${__cononical_name__}"
    logger debug "Abs Path:  ${script_path}/${__basename__}"
    logger debug "Args List: ${*}"
    logger debug "Version:   ${__version__}"
    logger debug "Created:   ${__created__}"
    logger debug "Revised:   ${__revised__}"
    logger debug "Coder(s):  ${__author__}"
    logger debug "Contact:   ${__contact__}"
    logger debug "Project:   ${__project_name__}"
    logger debug "Project Home: ${__project_home__}"
    logger debug "Template Version: ${__template_version__}"
    logger debug "System:    $(uname -orv)"
    logger debug "Hostname:  $(hostname)"
    logger debug "[re]uid:   $(id -ur)/$(id -u)"
    logger debug "PID/PPID:  /${PPID}"
    printf '\n%s\n' '----- start -----'
}

#==============================================================================
exit_error() {
    #:"""
    #: .. function:: exit_error()
    #:
    #: Report error and exit
    #:
    #: :param int error_number:  Number to use for Exit Code
    #: :param str error_string:  Short description of error
    #: .. note::
    #:     You may want to use ${LINENO} in the string this is called with.
    #: .. warning::
    #:     This function exits the script
    #:"""
    # shellcheck disable=SC2059
    printf "${strfmt_error}" "${2}" 1>&2
    exit "${1}"
}

#==============================================================================
_exit_trap() {
    #:"""
    #: .. function:: exit_trap()
    #:
    #: On terminal traps, run this before exit_error
    #:
    #: :param int trap_line: Line number trap caught on
    #: :param str trap_name: Short name of trap
    #:"""
    exit_error "${?}" "caught trap ${2} at line ${1}; exiting"
}

#==============================================================================
exit_clean() {
    #:"""
    #: .. function:: exit_clean()
    #:
    #: Clean up everything and exit gracefully
    #:"""
    [ "${script_debug}" = true ] && {
        set +o xtrace
        script_debug=false
        printf '%s\n' '------ end ------'
    }

    trap - INT TERM HUP
    exit 0
}

#==============================================================================
_init() {
    #:"""
    #: .. function:: init()
    #:
    #: Check for requirements, other set-up stuff
    #:"""
    #-- TODO: 'Initilize', check for requirements, etc...
    #--------------------------------------------------------------------------
    #-- Check if effectively root
    #--------------------------------------------------------------------------
    if [ "${__require_root__}" -eq 1 ] && [ "$(id -u)" -ne 0 ] ; then
      exit_error 77 'Must be run as root.'
    fi
    #--------------------------------------------------------------------------
}

#==============================================================================
#-- Check for debug flag & process
if [ "${*#*--debug}" != "${*}" ]; then
    script_debug=true
    LOGGER_LVL=10
    _debug_info "$@"
    #-- Only do full shell trace if external DEBUG var set to full
    [ "${DEBUG}" = 'full' ] && set -o xtrace
else
    script_debug=false
fi

#-- Some default settings
set -o errexit  # Exit if any statement returns non-true value
set -o nounset  # Exit if attempt to use an uninitialised variable

#:"""
#: .. note::
#:     Setting traps seprately for 2 reasons:
#:
#:         - Avoid calling "$(kill -l $((trap_num - 128)))" in exti_trap
#:         - Incase we want to handle them differently in the future
#:
#: .. describe:: Bug
#:     Passing LINENO may not be working as expected, need more real-world tests
#:"""
trap '_exit_trap ${LINENO} INT'  INT
trap '_exit_trap ${LINENO} TERM' TERM
trap '_exit_trap ${LINENO} HUP'  HUP

#-- Process options (ignore --debug, as we already checked)
# {% raw %}
# [ "${#}" -gt 0 ] && while :; do
while [ "${#}" -gt 0 ]; do  # {% endraw %}
    case "${1}" in
        --debug)     ;;
        -h|--help)   _usage   && exit 0 ;;
        --help-rest) _usage_rest   && exit 0 ;;
        --version)   _version && exit 0 ;;
        --)          shift && break ;;
        -?*)         exit_error 64 "invalid option: ${1}" ;;
        *)           ;;
    esac

    shift
done

_init

#==============================================================================
#-- TODO: Do something more interesting here...{#
logger debug "this is a debug"
logger info  "this is an info"
logger warn  "this is a warning"
logger error "this is an error"
logger crit  "this is critical"
#}

#==============================================================================
exit_clean
